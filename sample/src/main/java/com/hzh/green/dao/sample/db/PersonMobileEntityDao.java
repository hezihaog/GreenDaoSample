package com.hzh.green.dao.sample.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hzh.green.dao.sample.model.entity.PersonMobileEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "person_mobile".
*/
public class PersonMobileEntityDao extends AbstractDao<PersonMobileEntity, String> {

    public static final String TABLENAME = "person_mobile";

    /**
     * Properties of entity PersonMobileEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CreateTime = new Property(1, java.util.Date.class, "createTime", false, "create_time");
        public final static Property UpdateTime = new Property(2, java.util.Date.class, "updateTime", false, "update_time");
        public final static Property DeleteFlag = new Property(3, Integer.class, "deleteFlag", false, "delete_flag");
        public final static Property Version = new Property(4, Integer.class, "version", false, "version");
        public final static Property PersonInfoId = new Property(5, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property MobileNum = new Property(6, String.class, "mobileNum", false, "mobile_num");
    }


    public PersonMobileEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PersonMobileEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"person_mobile\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"create_time\" INTEGER NOT NULL ," + // 1: createTime
                "\"update_time\" INTEGER NOT NULL ," + // 2: updateTime
                "\"delete_flag\" INTEGER NOT NULL ," + // 3: deleteFlag
                "\"version\" INTEGER NOT NULL ," + // 4: version
                "\"PERSON_INFO_ID\" TEXT," + // 5: personInfoId
                "\"mobile_num\" TEXT NOT NULL );"); // 6: mobileNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"person_mobile\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PersonMobileEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getCreateTime().getTime());
        stmt.bindLong(3, entity.getUpdateTime().getTime());
        stmt.bindLong(4, entity.getDeleteFlag());
        stmt.bindLong(5, entity.getVersion());
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(6, personInfoId);
        }
        stmt.bindString(7, entity.getMobileNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PersonMobileEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getCreateTime().getTime());
        stmt.bindLong(3, entity.getUpdateTime().getTime());
        stmt.bindLong(4, entity.getDeleteFlag());
        stmt.bindLong(5, entity.getVersion());
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(6, personInfoId);
        }
        stmt.bindString(7, entity.getMobileNum());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public PersonMobileEntity readEntity(Cursor cursor, int offset) {
        PersonMobileEntity entity = new PersonMobileEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // createTime
            new java.util.Date(cursor.getLong(offset + 2)), // updateTime
            cursor.getInt(offset + 3), // deleteFlag
            cursor.getInt(offset + 4), // version
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // personInfoId
            cursor.getString(offset + 6) // mobileNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PersonMobileEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCreateTime(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setUpdateTime(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setDeleteFlag(cursor.getInt(offset + 3));
        entity.setVersion(cursor.getInt(offset + 4));
        entity.setPersonInfoId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMobileNum(cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(PersonMobileEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(PersonMobileEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PersonMobileEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
